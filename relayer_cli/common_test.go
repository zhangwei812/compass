package main

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	log "github.com/sirupsen/logrus"
	"math/big"
	"os"
	"os/signal"
	"syscall"
	"testing"
	"time"
)

func Test_CommpassInfo_preWork(t *testing.T) {
	commpassInfo := commpassInfo{}
	commpassInfo.relayerData = []*relayerInfo{
		{url: keystore1},
	}
	conn := getAtlasConn()
	commpassInfo.client = conn
	p, from := loadprivate(commpassInfo.relayerData[0].url)
	var acc common.Address
	acc.SetBytes(from.Bytes())
	a := getBalance(conn, acc)
	b, _ := a.Int64()
	commpassInfo.relayerData[0].from = acc
	commpassInfo.relayerData[0].registerValue = b
	commpassInfo.relayerData[0].priKey = p
	value := ethToWei(RegisterAmount)
	if commpassInfo.relayerData[0].registerValue < RegisterAmount {
		Fatal("Amount must bigger than ", RegisterAmount)
	}
	checkFee(new(big.Int).SetUint64(0))
	input := packInput(abiRelayer, "register", value)
	sendContractTransaction(conn, commpassInfo.relayerData[0].from, RelayerAddress, nil, commpassInfo.relayerData[0].priKey, input)
	for {
		time.Sleep(time.Second)
		commpassInfo.queryCommpassInfo(QueryRelayerinfo)
	}
}

func TestNamess(t *testing.T) {
	a := common.BytesToAddress([]byte("txVerifyAddress"))
	fmt.Println(a) //"0x0000000000747856657269667941646472657373"
}

func TestEth(t *testing.T) {
	a := common.HexToAddress("0xf908f0f843a00000000000000000000000005fc316bc118026f3839ddd737cae6838f9dc992ba00000000000000000000000005fc316bc118026f3839ddd737cae6838f9dc992b0ab9036902f9036501835da3dfbf9025af89b94937afd74f97824789da1f21ab75d19067bfb71ddf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000005fc316bc118026f3839ddd737cae6838f9dc992ba0000000000000000000000000000000000000000000000000000000000000000af89b94937afd74f97824789da1f21ab75d19067bfb71ddf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000005fc316bc118026f3839ddd737cae6838f9dc992ba00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000af9011d9423dd5a89c3ea51601b0674a4fa6ec6b3b14d0b7af884a0155e433be3576195943c515e1096620bc754e11b3a4b60fda7c4628caf373635a0000000000000000000000000937afd74f97824789da1f21ab75d19067bfb71dda00000000000000000000000005fc316bc118026f3839ddd737cae6838f9dc992ba00000000000000000000000005fc316bc118026f3839ddd737cae6838f9dc992bb8800000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000d3f90537f851a03cafaed6376c45f50169486e47659c4b16b0eea51dce93cedcfee5d5d24db5d880808080808080a0fff65fc18b2f34cb94f61438fb9092a32c73ee175fa15408345ded14f921a6178080808080808080f9017180a0e2ba07c517e7f11d07cdf7a53c1380cfcd002f0616d461fdd1b7f77d3f844501a0f726cb09b46117a629222b2263f9b02e2798707801c6c081078faa58ed072672a0cbba896a1f1a55c001938d22db279c224ae1fa8f74649eb68433df44d1be1d99a0e87a96a78e641a7217c682311edc00a548db143df465ff01f6c5c5025ae1e971a09bdf81cc5003046bfcbece4084b7215abe57415ff641297420a50f47d2868118a09b5c3d507a175c7fdc49a60921e697b0973a668934182b44c6552cd65f3653e7a0e62cad635d890abbe3e74180d3db714fc75d30fa8b7eac824864f739366d1cf7a0627fe0f5702653d5d4b06cb6230f6f4c5242871b4f0665e9688cff20db3cedb5a0009ed12f092a54d36a4922fec023ac80fe1b46ef0e255b01452683aa0b1569a9a06a431e3c33607085e8b35962b323b1bcda7428d9f14b98fc42621573126b9d78a0b419e5a074a9e564d81a455f0ec8ef8103c09ccc61c7a1b84c263fe459b39c918080808080f9036d20b9036902f9036501835da3dfbf9025af89b94937afd74f97824789da1f21ab75d19067bfb71ddf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000005fc316bc118026f3839ddd737cae6838f9dc992ba0000000000000000000000000000000000000000000000000000000000000000af89b94937afd74f97824789da1f21ab75d19067bfb71ddf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000005fc316bc118026f3839ddd737cae6838f9dc992ba00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000af9011d9423dd5a89c3ea51601b0674a4fa6ec6b3b14d0b7af884a0155e433be3576195943c515e1096620bc754e11b3a4b60fda7c4628caf373635a0000000000000000000000000937afd74f97824789da1f21ab75d19067bfb71dda00000000000000000000000005fc316bc118026f3839ddd737cae6838f9dc992ba00000000000000000000000005fc316bc118026f3839ddd737cae6838f9dc992bb8800000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000d383a93e350b")
	fmt.Println(a)
}

func TestGetTxProve(t *testing.T) {

	var personInfo []PersonInfo

	// 创建文件
	filePtr, err := os.Create("person_info.json")
	if err != nil {
		fmt.Println("Create file failed", err.Error())
		return
	}
	defer filePtr.Close()

	// 创建Json编码器
	encoder := json.NewEncoder(filePtr)

	err = encoder.Encode(personInfo)
	if err != nil {
		fmt.Println("Encoder failed", err.Error())

	} else {
		fmt.Println("Encoder success")
	}
}
func TestMigrateFlags(t *testing.T) {
	filePtr, err := os.Open("person_info.json")
	if err != nil {
		//fmt.Println("Open file failed [Err:%s]", err.Error())
		return
	}
	defer filePtr.Close()

	var person []PersonInfo

	// 创建json解码器
	decoder := json.NewDecoder(filePtr)
	err = decoder.Decode(&person)
	if err != nil {
		fmt.Println("Decoder failed", err.Error())

	} else {
		fmt.Println("Decoder success")
		fmt.Println(person)
	}

}
func TestCommpassInfo_HandleLogSwapOut(t *testing.T) {
	sigs := make(chan os.Signal, 1)
	done := make(chan bool, 1)
	signal.Notify(sigs, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT, syscall.SIGILL, syscall.SIGTRAP, syscall.SIGABRT, syscall.SIGBUS, syscall.SIGFPE, syscall.SIGKILL)
	go func() {
		sig := <-sigs
		fmt.Println()
		fmt.Println(sig)
		done <- true
	}()

	fmt.Println("awaiting signal")
	<-done
	fmt.Println("exiting")
}

func TestCommpassInfo_HandleLogSwapOut2(t *testing.T) {
	EventSwapOutHash = crypto.Keccak256Hash([]byte("LogSwapOut(uint256,address,address,address,uint256,uint256,uint256)"))
	fmt.Println(EventSwapOutHash.String())
}

func TestCommpassInfo_HandleLogSwapOut3commpassInfo_HandleLogSwapOut2(t *testing.T) {
	log.Error("err")
	fmt.Println("zhangwei")
	now := time.Now().UTC() // time.Time implements fmt.Stringer.
	fmt.Printf("%v %q\n", now, now)
}

func TestGetTxProve2(t *testing.T) {
	conn, err := ethclient.Dial("http://localhost:80820")
	if err != nil {
		fmt.Println(err)
	}
	for {
		a, _ := conn.BlockNumber(context.Background())
		fmt.Println(a)
	}

}
func TestCommpassIpOut3(t *testing.T) {
	conf := 0  // 配置、终端默认设置
	bg := 0    // 背景色、终端默认设置
	text := 31 // 前景色、红色
	fmt.Printf("%c[%d;%d;%dm%s%c[0m\n", 0x1B, conf, bg, text, "testPrintColor", 0x1B)
}
